@using Ortho.Shared.ViewModels

<style>
    .chevron-btn {
        width: 30px;
        margin-bottom: 6px;
    }
    .panel-name-tb {
        float: left;
        margin-right: 12px;
    }
    .panel-name-tb input {
        width: 200px;
    }
    .dxbs-grid-header-container thead {
        display: none;
    }
    .panel-title {
    font-size: 1rem;
    }
    .panel-listbox {
        border: 1px solid #949494;
        border-radius: initial !important;
    }
    .panel-listbox div div.card {
        border: 0px !important;
    }
    .panel-datagrid {
        border: 1px solid #949494;
        border-radius: initial !important;
    }
    .panel-datagrid div.card{
        border: 0px !important;
    }
    .modal-header.card-header{
       background-color: rgba(34,34,34,.03) !important;
       padding: 0.5rem 1rem !important;
    }
</style>

<h5 class="panel-title">Permanent Panels</h5>
<div class="row">
    <div class="col-6">
        <DxGrid Data="@PermanentPanelList" PageSize="5">
            <Columns>
                <DxGridDataColumn FieldName="Id" Caption="Select to View" AllowSort="false" TextAlignment="@GridTextAlignment.Center" Width="20%">
                    <HeaderCaptionTemplate>
                        <span style="text-align:center !important; width:100%; font-size:1rem;">Select to View</span>
                    </HeaderCaptionTemplate>
                    <CellDisplayTemplate>
                        <input type="radio" id="ppanelId" name="ppanelId" @onchange="() => ShowDetails(context)" value="">
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="PanelName" Caption="Panel Name" TextAlignment="@GridTextAlignment.Left" />
            </Columns>
        </DxGrid>
    </div>
    <div class="col-6">
        <DxListBox Data="@PermanentPanelAssays" @bind-Values="@PermanentPanelAssayValues" CssClass="panel-listbox" style="height:100%;">
            <DxListEditorColumn FieldName="@nameof(PanelAssayViewModel.AssayName)" Caption="@SelectedPermanentPanelName" />
        </DxListBox>
    </div>
</div>
<br /><hr /><br />
<div class="row">
    <div class="col-6">
        <div>
            <div>
                <h5 class="panel-title" style="margin-bottom:-28px;">User Defined Panels</h5>
            </div>
            <div>
                <DxButton Text="Create New Panel" RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="@ButtonRenderStyle.Dark"
                style="float:right; margin-bottom:5px;" Click="@CreateNewPanel" />
            </div>
        </div>
        <DxGrid Data="@UserDefinedPanelList" PageSize="5">
            <Columns>
                <DxGridDataColumn FieldName="Id" Caption="Select to Edit" AllowSort="false" TextAlignment="@GridTextAlignment.Center" Width="20%">
                    <HeaderCaptionTemplate>
                        <span style="text-align:center !important; width:100%; font-size:1rem;">Select to Edit</span>
                    </HeaderCaptionTemplate>
                    <CellDisplayTemplate>
                        <input type="radio" id="upanelId" name="upanelId" @onchange="() => EditDetails(context)">
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="PanelName" Caption="Panel Name" TextAlignment="@GridTextAlignment.Left" />
                <DxGridDataColumn FieldName="Id" Caption="Delete" AllowSort="false" TextAlignment="@GridTextAlignment.Center" Width="120px">
                    <HeaderCaptionTemplate>
                        <span style="text-align:center !important; width:100%; font-size:1rem;">Delete</span>
                    </HeaderCaptionTemplate>
                    <CellDisplayTemplate>
                        <a style="color:black;" href="javascript:;" @onclick="() => DeleteSelectedPanel(context)"><i class="oi oi-trash"></i></a>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>
<br />
<br />
<h5 class="panel-title">Panel Name</h5>
<div class="row">
    <div class="col-12">
        <div style="float:left; width:48%">
            <div style="margin-bottom:8px;">
                <DxTextBox @bind-Text="@SelectedUserDefinedPanelName" CssClass="panel-name-tb" />
                <a style="@(string.IsNullOrEmpty(SelectedUserDefinedPanelName) == true ? "color: #949494;" : "color: #007bff;") font-size: 22px;" 
                href="javascript:;" @onclick="SaveSelectedPanel">
                    <i class="fas fa-save" style="padding-top:3px;"></i>
                </a>
            </div>
            <DxDataGrid Data="@UserDefinedPanelAssays" @bind-MultipleSelectedDataRows="@SelectedUserDefinedAssays" 
            KeyFieldName="@nameof(PanelAssayViewModel.AssayId)" SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
            DataNavigationMode="DataGridNavigationMode.VirtualScrolling" VerticalScrollableHeight="300" CssClass="panel-datagrid">
                <DxDataGridColumn Field="@nameof(PanelAssayViewModel.AssayId)" Visible="false" />
                <DxDataGridColumn Field="@nameof(PanelAssayViewModel.AssayName)" />
            </DxDataGrid>
        </div>
        <div style="float:right; width:48%;">
            <h5 class="panel-title" style="text-decoration:underline; margin-top:16px; margin-bottom:5px;">All Assays</h5>
            <DxDataGrid Data="@AllAssayList" @bind-MultipleSelectedDataRows="@SelectedAssays" 
            KeyFieldName="@nameof(PanelAssayViewModel.AssayId)" SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
            DataNavigationMode="DataGridNavigationMode.VirtualScrolling" VerticalScrollableHeight="300" CssClass="panel-datagrid">
                <DxDataGridColumn Field="@nameof(PanelAssayViewModel.AssayId)" Visible="false" />
                <DxDataGridColumn Field="@nameof(PanelAssayViewModel.AssayName)" />
            </DxDataGrid>
        </div>
        <div style="margin:0 auto; width:4%; text-align:center;">
            <br /><br />
            <DxButton Text="<" CssClass="chevron-btn" Click="@ComeSelectedAssay" RenderStyleMode="@ButtonRenderStyleMode.Outline" 
            RenderStyle="@ButtonRenderStyle.Dark" style="margin-top:80px;" /><br />
            <DxButton Text=">" CssClass="chevron-btn" Click="@GoSelectedAssay" RenderStyleMode="@ButtonRenderStyleMode.Outline" 
            RenderStyle="@ButtonRenderStyle.Dark" /><br />
            <DxButton Text=">>" CssClass="chevron-btn" Click="@GoAllAssays" RenderStyleMode="@ButtonRenderStyleMode.Outline" 
            RenderStyle="@ButtonRenderStyle.Dark" />
        </div>
    </div>
</div>
<DxPopup
    @bind-Visible="@DeletePopupVisible"
    ShowFooter="true" HeaderText="Warning" CssClass="delete-popup-header">
    <BodyTemplate><span class="m-3">This cannot be undone, Are you sure message?</span></BodyTemplate>
    <FooterContentTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@(() => Delete())"/>
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => DeletePopupVisible = false)"/>
    </FooterContentTemplate>
</DxPopup>
<DxPopup
    @bind-Visible="@NotePopupVisible"
    ShowFooter="true" HeaderText="Note" CssClass="note-popup-header">
    <BodyTemplate><span class="m-3">Please update panel name.</span></BodyTemplate>
    <FooterContentTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => NotePopupVisible = false)"/>
    </FooterContentTemplate>
</DxPopup>
<DxPopup HeaderText="Note" @bind-Visible="@WarningPopupVisible" BodyText="@WarningPopupMessage"></DxPopup>

@code {
    [Parameter]
    public int AppUserId { get; set; }
    [Parameter]
    public IEnumerable<PanelViewModel> PermanentPanelList { get; set; }
    IEnumerable<PanelAssayViewModel> PermanentPanelAssays { get; set; }
    IEnumerable<PanelAssayViewModel> PermanentPanelAssayValues { get; set; }
    string SelectedPermanentPanelName = "Nothing";
    [Parameter]
    public IEnumerable<PanelViewModel> UserDefinedPanelList { get; set; }
    IEnumerable<PanelAssayViewModel> UserDefinedPanelAssays { get; set; }
    string SelectedUserDefinedPanelName;
    int SelectedUserDefinedPanelId;
    IEnumerable<PanelAssayViewModel> selectedUserDefinedAssays;
    public IEnumerable<PanelAssayViewModel> SelectedUserDefinedAssays
    {
        get
        {
            return selectedUserDefinedAssays;
        }
        set
        {
            selectedUserDefinedAssays = value;
            InvokeAsync(StateHasChanged);
        }
    }
    [Parameter]
    public IEnumerable<PanelAssayViewModel> AllAssayList { get; set; }
    IEnumerable<PanelAssayViewModel> selectedAssays;
    public IEnumerable<PanelAssayViewModel> SelectedAssays
    {
        get
        {
            return selectedAssays;
        }
        set
        {
            selectedAssays = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private bool DeletePopupVisible { get; set; }
    private int DeletePanelId { get; set; }
    private bool NotePopupVisible { get; set; }
    [Parameter]
    public EventCallback<int> DeleteSelectedPanelCallback { get; set; }
    [Parameter]
    public EventCallback<PanelViewModel> SaveSelectedPanelCallback { get; set; }
    private bool WarningPopupVisible { get; set; } = false;
    private string WarningPopupMessage { get; set; } = string.Empty;

    private void ShowDetails(GridDataColumnCellDisplayTemplateContext context)
    {
        var currentPanel = PermanentPanelList.Where(e => e.Id == (int)context.Value).FirstOrDefault();
        PermanentPanelAssays = currentPanel.PanelAssays.OrderBy(a => a.AssayName).ToList() 
        ?? new List<PanelAssayViewModel>();
        PermanentPanelAssayValues = PermanentPanelAssays;
        SelectedPermanentPanelName = currentPanel.PanelName;
    }

    private void DeleteSelectedPanel(GridDataColumnCellDisplayTemplateContext context)
    {
        var id = (int)context.Value;
        DeletePopupVisible = true;
        DeletePanelId = id;
    }

    private async void Delete()
    {
        DeletePopupVisible = false;
        await DeleteSelectedPanelCallback.InvokeAsync(DeletePanelId);
    }

    private void EditDetails(GridDataColumnCellDisplayTemplateContext context)
    {
        var selectedUserDefinedPanel = UserDefinedPanelList.FirstOrDefault(e => e.Id == (int)context.Value);
        UserDefinedPanelAssays = selectedUserDefinedPanel.PanelAssays.OrderBy(a => a.AssayName).ToList()
        ?? new List<PanelAssayViewModel>();
        SelectedUserDefinedPanelName = selectedUserDefinedPanel.PanelName;
        SelectedUserDefinedPanelId = selectedUserDefinedPanel.Id;
    }

    private void ComeSelectedAssay(MouseEventArgs args)
    {
        if (AllAssayList == null || !AllAssayList.Any())
            return;

        if (SelectedAssays == null || !SelectedAssays.Any())
            return;

        var existingAssays = CheckSameAssays(SelectedAssays, UserDefinedPanelAssays);
        if (!string.IsNullOrEmpty(existingAssays))
        {
            WarningPopupVisible = true;
            WarningPopupMessage = existingAssays + " are already existing in left panel.";
            return;
        }

        var allAssays = AllAssayList.ToList();
        var restAllAssays = allAssays.Except(SelectedAssays).ToList();
        AllAssayList = restAllAssays.AsEnumerable();

        var userDefinedPanelAssays = UserDefinedPanelAssays == null ? new List<PanelAssayViewModel>() : UserDefinedPanelAssays.ToList();
        userDefinedPanelAssays.AddRange(SelectedAssays);
        UserDefinedPanelAssays = userDefinedPanelAssays.AsEnumerable();

        SelectedAssays = null;
    }

    private void GoSelectedAssay(MouseEventArgs args)
    {
        if (UserDefinedPanelAssays == null || !UserDefinedPanelAssays.Any())
            return;

        if (SelectedUserDefinedAssays == null || !SelectedUserDefinedAssays.Any())
            return;

        var existingAssays = CheckSameAssays(SelectedUserDefinedAssays, AllAssayList);
        if (!string.IsNullOrEmpty(existingAssays))
        {
            WarningPopupVisible = true;
            WarningPopupMessage = existingAssays + " are already existing in right panel.";
            return;
        }

        var userDefinedPanelAssays = UserDefinedPanelAssays.ToList();
        var restUserDefinedPanelAssays = userDefinedPanelAssays.Except(SelectedUserDefinedAssays).ToList();
        UserDefinedPanelAssays = restUserDefinedPanelAssays.AsEnumerable();

        var allAssays = AllAssayList == null ? new List<PanelAssayViewModel>() : AllAssayList.ToList();
        allAssays.AddRange(SelectedUserDefinedAssays);
        AllAssayList = allAssays.AsEnumerable();

        SelectedUserDefinedAssays = null;
    }

    private void GoAllAssays(MouseEventArgs args)
    {
        if (UserDefinedPanelAssays == null || !UserDefinedPanelAssays.Any())
            return;

        var existingAssays = CheckSameAssays(UserDefinedPanelAssays, AllAssayList);
        if (!string.IsNullOrEmpty(existingAssays))
        {
            WarningPopupVisible = true;
            WarningPopupMessage = existingAssays + " are already existing in right panel.";
            return;
        }

        var targetList = AllAssayList == null ? new List<PanelAssayViewModel>() : AllAssayList.ToList();
        targetList.AddRange(UserDefinedPanelAssays);
        AllAssayList = targetList.AsEnumerable();

        var moveList = UserDefinedPanelAssays.ToList();
        moveList.Clear();
        UserDefinedPanelAssays = moveList.AsEnumerable();
    }

    private string CheckSameAssays(IEnumerable<PanelAssayViewModel> assays, IEnumerable<PanelAssayViewModel> targetAssays)
    {
        var existingAssayNames = string.Empty;
        foreach(var assay in assays)
        {
            var existing = targetAssays.Any(a => string.Equals(a.AssayName, assay.AssayName));
            if (existing)
            {
                var existingAssayName = targetAssays.FirstOrDefault(a => string.Equals(a.AssayName, assay.AssayName)).AssayName;
                existingAssayNames += existingAssayName + ", "; 
            }
        }

        return existingAssayNames.TrimEnd(' ').TrimEnd(',');
    }

    private void CreateNewPanel(MouseEventArgs args)
    {
        SelectedUserDefinedPanelName = "New Panel";
        SelectedUserDefinedPanelId = 0;
        UserDefinedPanelAssays = new List<PanelAssayViewModel>();
    }

    private async void SaveSelectedPanel()
    {
        if (string.IsNullOrEmpty(SelectedUserDefinedPanelName))
            return;

        if(SelectedUserDefinedPanelId == 0 && string.Equals(SelectedUserDefinedPanelName.ToLower(), "new panel"))
        {
            NotePopupVisible = true;
            return;
        }
        var selectedPanelViewModel = new PanelViewModel
        {
            Id = SelectedUserDefinedPanelId,
            UserId = AppUserId,
            PanelName = SelectedUserDefinedPanelName,
            PanelAssays = UserDefinedPanelAssays.ToList()
        };

        await SaveSelectedPanelCallback.InvokeAsync(selectedPanelViewModel);
    }
}